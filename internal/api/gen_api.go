// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AsyncGenerateImageApiRequestBodyAspectRatio.
const (
	N11  AsyncGenerateImageApiRequestBodyAspectRatio = "1:1"
	N169 AsyncGenerateImageApiRequestBodyAspectRatio = "16:9"
	N23  AsyncGenerateImageApiRequestBodyAspectRatio = "2:3"
	N32  AsyncGenerateImageApiRequestBodyAspectRatio = "3:2"
	N34  AsyncGenerateImageApiRequestBodyAspectRatio = "3:4"
	N43  AsyncGenerateImageApiRequestBodyAspectRatio = "4:3"
	N916 AsyncGenerateImageApiRequestBodyAspectRatio = "9:16"
)

// Defines values for AsyncTaskStatusStatus.
const (
	AsyncTaskStatusStatusCANCELED   AsyncTaskStatusStatus = "CANCELED"
	AsyncTaskStatusStatusCOMPLETED  AsyncTaskStatusStatus = "COMPLETED"
	AsyncTaskStatusStatusFAILED     AsyncTaskStatusStatus = "FAILED"
	AsyncTaskStatusStatusINPROGRESS AsyncTaskStatusStatus = "IN_PROGRESS"
	AsyncTaskStatusStatusINQUEUE    AsyncTaskStatusStatus = "IN_QUEUE"
	AsyncTaskStatusStatusTIMEDOUT   AsyncTaskStatusStatus = "TIMED_OUT"
)

// Defines values for AvatarResponseStatus.
const (
	BUILDING AvatarResponseStatus = "BUILDING"
	ERROR    AvatarResponseStatus = "ERROR"
	PENDING  AvatarResponseStatus = "PENDING"
	READY    AvatarResponseStatus = "READY"
)

// Defines values for FinetuningTaskOutputStatus.
const (
	FinetuningTaskOutputStatusCANCELED   FinetuningTaskOutputStatus = "CANCELED"
	FinetuningTaskOutputStatusCOMPLETED  FinetuningTaskOutputStatus = "COMPLETED"
	FinetuningTaskOutputStatusFAILED     FinetuningTaskOutputStatus = "FAILED"
	FinetuningTaskOutputStatusINPROGRESS FinetuningTaskOutputStatus = "IN_PROGRESS"
	FinetuningTaskOutputStatusINQUEUE    FinetuningTaskOutputStatus = "IN_QUEUE"
	FinetuningTaskOutputStatusTIMEDOUT   FinetuningTaskOutputStatus = "TIMED_OUT"
)

// Defines values for GenerateAvatarTaskOutputStatus.
const (
	GenerateAvatarTaskOutputStatusCANCELED   GenerateAvatarTaskOutputStatus = "CANCELED"
	GenerateAvatarTaskOutputStatusCOMPLETED  GenerateAvatarTaskOutputStatus = "COMPLETED"
	GenerateAvatarTaskOutputStatusFAILED     GenerateAvatarTaskOutputStatus = "FAILED"
	GenerateAvatarTaskOutputStatusINPROGRESS GenerateAvatarTaskOutputStatus = "IN_PROGRESS"
	GenerateAvatarTaskOutputStatusINQUEUE    GenerateAvatarTaskOutputStatus = "IN_QUEUE"
	GenerateAvatarTaskOutputStatusTIMEDOUT   GenerateAvatarTaskOutputStatus = "TIMED_OUT"
)

// Defines values for GenerateTalkingAvatarTaskOutputStatus.
const (
	GenerateTalkingAvatarTaskOutputStatusCANCELED   GenerateTalkingAvatarTaskOutputStatus = "CANCELED"
	GenerateTalkingAvatarTaskOutputStatusCOMPLETED  GenerateTalkingAvatarTaskOutputStatus = "COMPLETED"
	GenerateTalkingAvatarTaskOutputStatusFAILED     GenerateTalkingAvatarTaskOutputStatus = "FAILED"
	GenerateTalkingAvatarTaskOutputStatusINPROGRESS GenerateTalkingAvatarTaskOutputStatus = "IN_PROGRESS"
	GenerateTalkingAvatarTaskOutputStatusINQUEUE    GenerateTalkingAvatarTaskOutputStatus = "IN_QUEUE"
	GenerateTalkingAvatarTaskOutputStatusTIMEDOUT   GenerateTalkingAvatarTaskOutputStatus = "TIMED_OUT"
)

// Defines values for GenerateTaskOutputStatus.
const (
	CANCELED   GenerateTaskOutputStatus = "CANCELED"
	COMPLETED  GenerateTaskOutputStatus = "COMPLETED"
	FAILED     GenerateTaskOutputStatus = "FAILED"
	INPROGRESS GenerateTaskOutputStatus = "IN_PROGRESS"
	INQUEUE    GenerateTaskOutputStatus = "IN_QUEUE"
	TIMEDOUT   GenerateTaskOutputStatus = "TIMED_OUT"
)

// Defines values for StartSessionApiRequestBodyModel.
const (
	Metis25 StartSessionApiRequestBodyModel = "metis-2.5"
)

// Defines values for TTSApiRequestBodyChineseLanguage.
const (
	Mandarin TTSApiRequestBodyChineseLanguage = "mandarin"
	Yue      TTSApiRequestBodyChineseLanguage = "yue"
)

// AsyncBuildApiRequestBody defines model for AsyncBuildApiRequestBody.
type AsyncBuildApiRequestBody struct {
	// Image The base64 encoded image to build the avatar from
	Image string `json:"image"`

	// Name The name of the avatar
	Name string `json:"name"`
}

// AsyncBuildApiResponseBody defines model for AsyncBuildApiResponseBody.
type AsyncBuildApiResponseBody struct {
	Data *AsyncBuildOutput `json:"data,omitempty"`
}

// AsyncBuildOutput defines model for AsyncBuildOutput.
type AsyncBuildOutput struct {
	// AvatarId The ID of the created avatar
	AvatarId string `json:"avatar_id"`
}

// AsyncFinetuningApiResponseBody defines model for AsyncFinetuningApiResponseBody.
type AsyncFinetuningApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncGenerateAvatarApiRequestBody defines model for AsyncGenerateAvatarApiRequestBody.
type AsyncGenerateAvatarApiRequestBody struct {
	// Prompt The prompt for the avatar generation.
	Prompt string `json:"prompt"`

	// Seed Random seed for the generation, if not provided a random seed will be used
	Seed    *int64   `json:"seed,omitempty"`
	Webhook *Webhook `json:"webhook,omitempty"`
}

// AsyncGenerateAvatarApiResponseBody defines model for AsyncGenerateAvatarApiResponseBody.
type AsyncGenerateAvatarApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncGenerateImageApiRequestBody defines model for AsyncGenerateImageApiRequestBody.
type AsyncGenerateImageApiRequestBody struct {
	// AspectRatio The aspect ratio for the generation. Default to '16:9'
	AspectRatio AsyncGenerateImageApiRequestBodyAspectRatio `json:"aspect_ratio"`

	// Prompt The prompt for the image generation. Include in the prompt the Avatar Id (uuid) to generate image of the avatar.
	Prompt string `json:"prompt"`

	// Seed Random seed for the generation, if not provided a random seed will be used
	Seed    *int64   `json:"seed,omitempty"`
	Webhook *Webhook `json:"webhook,omitempty"`
}

// AsyncGenerateImageApiRequestBodyAspectRatio The aspect ratio for the generation. Default to '16:9'
type AsyncGenerateImageApiRequestBodyAspectRatio string

// AsyncGenerateImageApiResponseBody defines model for AsyncGenerateImageApiResponseBody.
type AsyncGenerateImageApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncGenerateTalkingAvatarApiRequestBody defines model for AsyncGenerateTalkingAvatarApiRequestBody.
type AsyncGenerateTalkingAvatarApiRequestBody struct {
	// Audio The base64 encoded audio file to use as the avatar's speech.
	Audio string `json:"audio"`

	// Image The base64 encoded image to use as the avatar's face.
	Image   string   `json:"image"`
	Webhook *Webhook `json:"webhook,omitempty"`
}

// AsyncGenerateTalkingAvatarApiResponseBody defines model for AsyncGenerateTalkingAvatarApiResponseBody.
type AsyncGenerateTalkingAvatarApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncTaskStatus defines model for AsyncTaskStatus.
type AsyncTaskStatus struct {
	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status AsyncTaskStatusStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// AsyncTaskStatusStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type AsyncTaskStatusStatus string

// AvatarResponse defines model for AvatarResponse.
type AvatarResponse struct {
	// CreatedAt Creation timestamp of the avatar
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for the avatar
	Id string `json:"id"`

	// Name Name of the avatar
	Name string `json:"name"`

	// Status Status of the avatar, either 'PENDING', 'BUILDING', 'READY' or 'ERROR'
	Status AvatarResponseStatus `json:"status"`

	// Themes Avatar themes are the different appearances of the avatar, each with its own key image and live video.
	Themes *[]PresignedAvatarTheme `json:"themes"`

	// UserId User ID of the owner of this avatar
	UserId string `json:"user_id"`
}

// AvatarResponseStatus Status of the avatar, either 'PENDING', 'BUILDING', 'READY' or 'ERROR'
type AvatarResponseStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location *string `json:"location,omitempty"`

	// Message Error message text
	Message *string `json:"message,omitempty"`

	// Value The value at the given location
	Value *interface{} `json:"value,omitempty"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Errors Optional list of individual error details
	Errors *[]ErrorDetail `json:"errors"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status HTTP status code
	Status *int64 `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title *string `json:"title,omitempty"`

	// Type A URI reference to human-readable documentation for the error.
	Type *string `json:"type,omitempty"`
}

// FinetuningStatusApiResponseBody defines model for FinetuningStatusApiResponseBody.
type FinetuningStatusApiResponseBody struct {
	Data *FinetuningTaskOutput `json:"data,omitempty"`
}

// FinetuningTaskOutput defines model for FinetuningTaskOutput.
type FinetuningTaskOutput struct {
	// Error Error message if any
	Error *string `json:"error,omitempty"`

	// ModelInferParams The inference parameters for the model
	ModelInferParams map[string]interface{} `json:"model_infer_params"`

	// ProfileId The profile ID of the custom voice model
	ProfileId *string `json:"profile_id,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status FinetuningTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`

	// TrainTime The time taken to train the model in seconds
	TrainTime float32 `json:"train_time"`
}

// FinetuningTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type FinetuningTaskOutputStatus string

// GenerateAvatarStatusApiResponseBody defines model for GenerateAvatarStatusApiResponseBody.
type GenerateAvatarStatusApiResponseBody struct {
	Data *GenerateAvatarTaskOutput `json:"data,omitempty"`
}

// GenerateAvatarTaskOutput defines model for GenerateAvatarTaskOutput.
type GenerateAvatarTaskOutput struct {
	// Image The generated avatar image, in base64 format
	Image *string `json:"image,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status GenerateAvatarTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// GenerateAvatarTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type GenerateAvatarTaskOutputStatus string

// GenerateImageStatusApiResponseBody defines model for GenerateImageStatusApiResponseBody.
type GenerateImageStatusApiResponseBody struct {
	Data *GenerateTaskOutput `json:"data,omitempty"`
}

// GenerateTalkingAvatarStatusApiResponseBody defines model for GenerateTalkingAvatarStatusApiResponseBody.
type GenerateTalkingAvatarStatusApiResponseBody struct {
	Data *GenerateTalkingAvatarTaskOutput `json:"data,omitempty"`
}

// GenerateTalkingAvatarTaskOutput defines model for GenerateTalkingAvatarTaskOutput.
type GenerateTalkingAvatarTaskOutput struct {
	// FileUrl The URL of the output MP4 video.
	FileUrl *string `json:"file_url,omitempty"`

	// Id The unique request ID
	Id string `json:"id"`

	// OutputDuration The duration of the output video in seconds.
	OutputDuration *float64 `json:"output_duration,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status GenerateTalkingAvatarTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// GenerateTalkingAvatarTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type GenerateTalkingAvatarTaskOutputStatus string

// GenerateTaskOutput defines model for GenerateTaskOutput.
type GenerateTaskOutput struct {
	// Image The generated image in JPG format, encoded in base64.
	Image *string `json:"image,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status GenerateTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// GenerateTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type GenerateTaskOutputStatus string

// GetAvatarApiResponseBody defines model for GetAvatarApiResponseBody.
type GetAvatarApiResponseBody struct {
	Data AvatarResponse `json:"data"`
}

// GetPremadeProfilesApiResponseBody defines model for GetPremadeProfilesApiResponseBody.
type GetPremadeProfilesApiResponseBody struct {
	// Data List of premade voice profiles
	Data *[]VoiceProfile `json:"data"`
}

// GetSessionProfileApiResponseBody defines model for GetSessionProfileApiResponseBody.
type GetSessionProfileApiResponseBody struct {
	Data *MetisSessionProfile `json:"data,omitempty"`
}

// GetUserAvatarListApiResponseBody defines model for GetUserAvatarListApiResponseBody.
type GetUserAvatarListApiResponseBody struct {
	// Data List of avatars for the user
	Data *[]AvatarResponse `json:"data"`
}

// ListSessionsApiResponseBody defines model for ListSessionsApiResponseBody.
type ListSessionsApiResponseBody struct {
	// Data List of active interactive sessions
	Data *[]MetisSession `json:"data"`
}

// MetisSession defines model for MetisSession.
type MetisSession struct {
	DesiredState *string   `json:"desired_state"`
	MetisModel   string    `json:"metis_model"`
	SessionId    string    `json:"session_id"`
	StartTime    time.Time `json:"start_time"`
	State        *string   `json:"state"`
	UserId       string    `json:"user_id"`
}

// MetisSessionProfile defines model for MetisSessionProfile.
type MetisSessionProfile struct {
	Avatar       PresignedAvatarSystemProfile `json:"avatar"`
	SessionId    string                       `json:"session_id"`
	SessionToken string                       `json:"session_token"`
}

// PresignedAvatarSystemProfile defines model for PresignedAvatarSystemProfile.
type PresignedAvatarSystemProfile struct {
	Id           string    `json:"id"`
	Image        *string   `json:"image,omitempty"`
	Liveportrait *[]string `json:"liveportrait"`
	Name         string    `json:"name"`
}

// PresignedAvatarTheme defines model for PresignedAvatarTheme.
type PresignedAvatarTheme struct {
	// KeyImage URL of the key portrait image of the avatar in this theme.
	KeyImage *string `json:"key_image,omitempty"`

	// LiveVideo URL of the live video for the avatar in this theme.
	LiveVideo *string `json:"live_video,omitempty"`

	// Name Name of the avatar theme
	Name string `json:"name"`
}

// STTApiRequestBody defines model for STTApiRequestBody.
type STTApiRequestBody struct {
	// Audio Base64 encoded audio data
	Audio string `json:"audio"`
}

// STTApiResponseBody defines model for STTApiResponseBody.
type STTApiResponseBody struct {
	Data *STTOutput `json:"data,omitempty"`
}

// STTOutput defines model for STTOutput.
type STTOutput struct {
	// Id The unique request ID
	Id string `json:"id"`

	// InputDuration The duration of the input audio in seconds.
	InputDuration *float64 `json:"input_duration,omitempty"`

	// Text The transcribed text
	Text string `json:"text"`

	// Transcription The transcription of the audio
	Transcription *[]interface{} `json:"transcription"`
}

// StartSessionApiRequestBody defines model for StartSessionApiRequestBody.
type StartSessionApiRequestBody struct {
	// AvatarId The avatar id
	AvatarId string `json:"avatar_id"`

	// IdleTimeout Idle timeout in mins
	IdleTimeout *int64 `json:"idle_timeout,omitempty"`

	// Instruction The instruction prompt for the avatar in the session
	Instruction string `json:"instruction"`

	// LlmModel The LLM model to be used for generating avatar's response
	LlmModel string `json:"llm_model"`

	// Model The interactive model version
	Model StartSessionApiRequestBodyModel `json:"model"`

	// Tools The tools to be used in the session
	Tools *string `json:"tools,omitempty"`

	// VoiceProfileId The voice profile id
	VoiceProfileId string `json:"voice_profile_id"`
}

// StartSessionApiRequestBodyModel The interactive model version
type StartSessionApiRequestBodyModel string

// StartSessionApiResponseBody defines model for StartSessionApiResponseBody.
type StartSessionApiResponseBody struct {
	Data *StartSessionOutput `json:"data,omitempty"`
}

// StartSessionOutput defines model for StartSessionOutput.
type StartSessionOutput struct {
	Session MetisSession `json:"session"`

	// SessionToken The session token for the started session
	SessionToken string `json:"session_token"`
}

// StopSessionOutput defines model for StopSessionOutput.
type StopSessionOutput struct {
	// StoppedSessions The list of stopped session IDs
	StoppedSessions *[]string `json:"stopped_sessions"`
}

// StopSessionsApiRequestBody defines model for StopSessionsApiRequestBody.
type StopSessionsApiRequestBody struct {
	// SessionIds The id of the sessions to be stopped
	SessionIds *[]string `json:"session_ids"`
}

// StopSessionsApiResponseBody defines model for StopSessionsApiResponseBody.
type StopSessionsApiResponseBody struct {
	Data *StopSessionOutput `json:"data,omitempty"`
}

// TTSApiRequestBody defines model for TTSApiRequestBody.
type TTSApiRequestBody struct {
	// ChineseLanguage This param tells the TTS to use the chinese language dialect to generate audio, and only required when generating audio with Mandarin or Cantonese. Currently supports 'mandarin' and 'yue' (i.e. Cantonese) variants.
	ChineseLanguage *TTSApiRequestBodyChineseLanguage `json:"chinese_language,omitempty"`
	Opts            *TTSParams                        `json:"opts,omitempty"`

	// ReturnType Return type of the audio, either 'b64_audio_str' or 'file_url'.
	ReturnType string `json:"return_type"`

	// Text Text to be converted to speech
	Text string `json:"text"`

	// VoiceProfileId Voice profile ID
	VoiceProfileId string `json:"voice_profile_id"`
}

// TTSApiRequestBodyChineseLanguage This param tells the TTS to use the chinese language dialect to generate audio, and only required when generating audio with Mandarin or Cantonese. Currently supports 'mandarin' and 'yue' (i.e. Cantonese) variants.
type TTSApiRequestBodyChineseLanguage string

// TTSApiResponseBody defines model for TTSApiResponseBody.
type TTSApiResponseBody struct {
	Data *TTSOutput `json:"data,omitempty"`
}

// TTSOutput defines model for TTSOutput.
type TTSOutput struct {
	// B64AudioStr The PCM s16 audio data encoded as a base64 string. Only available when the return_type is 'b64_audio_str'.
	B64AudioStr *string `json:"b64_audio_str,omitempty"`

	// FileUrl The URL of the audio file. Only available when the return_type is 'file_url'.
	FileUrl *string `json:"file_url,omitempty"`

	// Id The unique request ID
	Id string `json:"id"`

	// OutputDuration The duration of the output audio in seconds.
	OutputDuration *float64 `json:"output_duration,omitempty"`

	// VoiceProfileId The voice profile ID used for TTS
	VoiceProfileId string `json:"voice_profile_id"`
}

// TTSParams defines model for TTSParams.
type TTSParams struct {
	// FragmentInterval Control the length of pause between sentenses. Default is 0.3.
	FragmentInterval *float32 `json:"fragment_interval,omitempty"`

	// Temperature The temperature for the TTS model, controls the randomness of the output. Default is 1.0.
	Temperature *float32 `json:"temperature,omitempty"`
}

// VoiceProfile defines model for VoiceProfile.
type VoiceProfile struct {
	// CreatedAt The creation date of the voice profile.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description The description of the voice profile.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the voice profile.
	Id string `json:"id"`

	// IsPremade Whether the voice profile is a default premade profile.
	IsPremade *bool `json:"is_premade,omitempty"`

	// Name The name of the voice profile.
	Name *string `json:"name,omitempty"`

	// SampleClip The URL of a sample audio clip for the voice profile.
	SampleClip *string `json:"sample_clip,omitempty"`

	// Status The status of the voice profile.
	Status *string `json:"status,omitempty"`

	// UserId The user ID of the owner associated with the voice profile.
	UserId *string `json:"user_id,omitempty"`
}

// Webhook defines model for Webhook.
type Webhook struct {
	// AuthToken Auth token used to authenticate the webhook via 'Authorization: Bearer' header
	AuthToken *string `json:"auth_token,omitempty"`

	// Url Webhook URL to receive the async task status
	Url string `json:"url"`
}

// PostV1VoiceCloneMultipartBody defines parameters for PostV1VoiceClone.
type PostV1VoiceCloneMultipartBody struct {
	// AnnotationList The annotation file for the voice cloning task
	AnnotationList openapi_types.File   `json:"annotation_list"`
	AudioSamples   []openapi_types.File `json:"audio_samples"`

	// Name The name of the new voice profile to be created. If not provided, a default name will be generated.
	Name    *string  `json:"name,omitempty"`
	Webhook *Webhook `json:"webhook,omitempty"`
}

// PostV1AvatarAsyncBuildJSONRequestBody defines body for PostV1AvatarAsyncBuild for application/json ContentType.
type PostV1AvatarAsyncBuildJSONRequestBody = AsyncBuildApiRequestBody

// PostV1AvatarAsyncGenerateJSONRequestBody defines body for PostV1AvatarAsyncGenerate for application/json ContentType.
type PostV1AvatarAsyncGenerateJSONRequestBody = AsyncGenerateAvatarApiRequestBody

// PostV1ImageAsyncGenerateJSONRequestBody defines body for PostV1ImageAsyncGenerate for application/json ContentType.
type PostV1ImageAsyncGenerateJSONRequestBody = AsyncGenerateImageApiRequestBody

// PostV1InteractiveStartSessionJSONRequestBody defines body for PostV1InteractiveStartSession for application/json ContentType.
type PostV1InteractiveStartSessionJSONRequestBody = StartSessionApiRequestBody

// PostV1InteractiveStopSessionsJSONRequestBody defines body for PostV1InteractiveStopSessions for application/json ContentType.
type PostV1InteractiveStopSessionsJSONRequestBody = StopSessionsApiRequestBody

// PostV1SpeechSttJSONRequestBody defines body for PostV1SpeechStt for application/json ContentType.
type PostV1SpeechSttJSONRequestBody = STTApiRequestBody

// PostV1SpeechTtsJSONRequestBody defines body for PostV1SpeechTts for application/json ContentType.
type PostV1SpeechTtsJSONRequestBody = TTSApiRequestBody

// PostV1VideoAsyncGenerateTalkingAvatarJSONRequestBody defines body for PostV1VideoAsyncGenerateTalkingAvatar for application/json ContentType.
type PostV1VideoAsyncGenerateTalkingAvatarJSONRequestBody = AsyncGenerateTalkingAvatarApiRequestBody

// PostV1VoiceCloneMultipartRequestBody defines body for PostV1VoiceClone for multipart/form-data ContentType.
type PostV1VoiceCloneMultipartRequestBody PostV1VoiceCloneMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostV1AvatarAsyncBuildWithBody request with any body
	PostV1AvatarAsyncBuildWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AvatarAsyncBuild(ctx context.Context, body PostV1AvatarAsyncBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AvatarAsyncGenerateWithBody request with any body
	PostV1AvatarAsyncGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AvatarAsyncGenerate(ctx context.Context, body PostV1AvatarAsyncGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AvatarAsyncGenerateTaskIdStatus request
	GetV1AvatarAsyncGenerateTaskIdStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AvatarList request
	GetV1AvatarList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AvatarId request
	GetV1AvatarId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ImageAsyncGenerateWithBody request with any body
	PostV1ImageAsyncGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ImageAsyncGenerate(ctx context.Context, body PostV1ImageAsyncGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ImageAsyncGenerateTaskIdStatus request
	GetV1ImageAsyncGenerateTaskIdStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1InteractiveList request
	GetV1InteractiveList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1InteractiveSessionIdProfile request
	GetV1InteractiveSessionIdProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1InteractiveStartSessionWithBody request with any body
	PostV1InteractiveStartSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1InteractiveStartSession(ctx context.Context, body PostV1InteractiveStartSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1InteractiveStopSessionsWithBody request with any body
	PostV1InteractiveStopSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1InteractiveStopSessions(ctx context.Context, body PostV1InteractiveStopSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SpeechSttWithBody request with any body
	PostV1SpeechSttWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SpeechStt(ctx context.Context, body PostV1SpeechSttJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SpeechTtsWithBody request with any body
	PostV1SpeechTtsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SpeechTts(ctx context.Context, body PostV1SpeechTtsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1VideoAsyncGenerateTalkingAvatarWithBody request with any body
	PostV1VideoAsyncGenerateTalkingAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1VideoAsyncGenerateTalkingAvatar(ctx context.Context, body PostV1VideoAsyncGenerateTalkingAvatarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatus request
	GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1VoiceCloneWithBody request with any body
	PostV1VoiceCloneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VoiceCloneTaskIdStatus request
	GetV1VoiceCloneTaskIdStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VoicePremadeProfiles request
	GetV1VoicePremadeProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostV1AvatarAsyncBuildWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AvatarAsyncBuildRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AvatarAsyncBuild(ctx context.Context, body PostV1AvatarAsyncBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AvatarAsyncBuildRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AvatarAsyncGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AvatarAsyncGenerateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AvatarAsyncGenerate(ctx context.Context, body PostV1AvatarAsyncGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AvatarAsyncGenerateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AvatarAsyncGenerateTaskIdStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AvatarAsyncGenerateTaskIdStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AvatarList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AvatarListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AvatarId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AvatarIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ImageAsyncGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ImageAsyncGenerateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ImageAsyncGenerate(ctx context.Context, body PostV1ImageAsyncGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ImageAsyncGenerateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ImageAsyncGenerateTaskIdStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ImageAsyncGenerateTaskIdStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1InteractiveList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InteractiveListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1InteractiveSessionIdProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InteractiveSessionIdProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InteractiveStartSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InteractiveStartSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InteractiveStartSession(ctx context.Context, body PostV1InteractiveStartSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InteractiveStartSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InteractiveStopSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InteractiveStopSessionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InteractiveStopSessions(ctx context.Context, body PostV1InteractiveStopSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InteractiveStopSessionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SpeechSttWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SpeechSttRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SpeechStt(ctx context.Context, body PostV1SpeechSttJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SpeechSttRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SpeechTtsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SpeechTtsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SpeechTts(ctx context.Context, body PostV1SpeechTtsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SpeechTtsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VideoAsyncGenerateTalkingAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VideoAsyncGenerateTalkingAvatarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VideoAsyncGenerateTalkingAvatar(ctx context.Context, body PostV1VideoAsyncGenerateTalkingAvatarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VideoAsyncGenerateTalkingAvatarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VoiceCloneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VoiceCloneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VoiceCloneTaskIdStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VoiceCloneTaskIdStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VoicePremadeProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VoicePremadeProfilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostV1AvatarAsyncBuildRequest calls the generic PostV1AvatarAsyncBuild builder with application/json body
func NewPostV1AvatarAsyncBuildRequest(server string, body PostV1AvatarAsyncBuildJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AvatarAsyncBuildRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AvatarAsyncBuildRequestWithBody generates requests for PostV1AvatarAsyncBuild with any type of body
func NewPostV1AvatarAsyncBuildRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/async_build")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1AvatarAsyncGenerateRequest calls the generic PostV1AvatarAsyncGenerate builder with application/json body
func NewPostV1AvatarAsyncGenerateRequest(server string, body PostV1AvatarAsyncGenerateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AvatarAsyncGenerateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AvatarAsyncGenerateRequestWithBody generates requests for PostV1AvatarAsyncGenerate with any type of body
func NewPostV1AvatarAsyncGenerateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/async_generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AvatarAsyncGenerateTaskIdStatusRequest generates requests for GetV1AvatarAsyncGenerateTaskIdStatus
func NewGetV1AvatarAsyncGenerateTaskIdStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/async_generate/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AvatarListRequest generates requests for GetV1AvatarList
func NewGetV1AvatarListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AvatarIdRequest generates requests for GetV1AvatarId
func NewGetV1AvatarIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ImageAsyncGenerateRequest calls the generic PostV1ImageAsyncGenerate builder with application/json body
func NewPostV1ImageAsyncGenerateRequest(server string, body PostV1ImageAsyncGenerateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ImageAsyncGenerateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ImageAsyncGenerateRequestWithBody generates requests for PostV1ImageAsyncGenerate with any type of body
func NewPostV1ImageAsyncGenerateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/image/async_generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ImageAsyncGenerateTaskIdStatusRequest generates requests for GetV1ImageAsyncGenerateTaskIdStatus
func NewGetV1ImageAsyncGenerateTaskIdStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/image/async_generate/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1InteractiveListRequest generates requests for GetV1InteractiveList
func NewGetV1InteractiveListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/interactive/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1InteractiveSessionIdProfileRequest generates requests for GetV1InteractiveSessionIdProfile
func NewGetV1InteractiveSessionIdProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/interactive/session/%s/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1InteractiveStartSessionRequest calls the generic PostV1InteractiveStartSession builder with application/json body
func NewPostV1InteractiveStartSessionRequest(server string, body PostV1InteractiveStartSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1InteractiveStartSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1InteractiveStartSessionRequestWithBody generates requests for PostV1InteractiveStartSession with any type of body
func NewPostV1InteractiveStartSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/interactive/start_session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1InteractiveStopSessionsRequest calls the generic PostV1InteractiveStopSessions builder with application/json body
func NewPostV1InteractiveStopSessionsRequest(server string, body PostV1InteractiveStopSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1InteractiveStopSessionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1InteractiveStopSessionsRequestWithBody generates requests for PostV1InteractiveStopSessions with any type of body
func NewPostV1InteractiveStopSessionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/interactive/stop_sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1SpeechSttRequest calls the generic PostV1SpeechStt builder with application/json body
func NewPostV1SpeechSttRequest(server string, body PostV1SpeechSttJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SpeechSttRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SpeechSttRequestWithBody generates requests for PostV1SpeechStt with any type of body
func NewPostV1SpeechSttRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/speech/stt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1SpeechTtsRequest calls the generic PostV1SpeechTts builder with application/json body
func NewPostV1SpeechTtsRequest(server string, body PostV1SpeechTtsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SpeechTtsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SpeechTtsRequestWithBody generates requests for PostV1SpeechTts with any type of body
func NewPostV1SpeechTtsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/speech/tts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1VideoAsyncGenerateTalkingAvatarRequest calls the generic PostV1VideoAsyncGenerateTalkingAvatar builder with application/json body
func NewPostV1VideoAsyncGenerateTalkingAvatarRequest(server string, body PostV1VideoAsyncGenerateTalkingAvatarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1VideoAsyncGenerateTalkingAvatarRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1VideoAsyncGenerateTalkingAvatarRequestWithBody generates requests for PostV1VideoAsyncGenerateTalkingAvatar with any type of body
func NewPostV1VideoAsyncGenerateTalkingAvatarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/video/async_generate_talking_avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusRequest generates requests for GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatus
func NewGetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/video/async_generate_talking_avatar/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1VoiceCloneRequestWithBody generates requests for PostV1VoiceClone with any type of body
func NewPostV1VoiceCloneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/clone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1VoiceCloneTaskIdStatusRequest generates requests for GetV1VoiceCloneTaskIdStatus
func NewGetV1VoiceCloneTaskIdStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/clone/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VoicePremadeProfilesRequest generates requests for GetV1VoicePremadeProfiles
func NewGetV1VoicePremadeProfilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/premade_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostV1AvatarAsyncBuildWithBodyWithResponse request with any body
	PostV1AvatarAsyncBuildWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AvatarAsyncBuildResponse, error)

	PostV1AvatarAsyncBuildWithResponse(ctx context.Context, body PostV1AvatarAsyncBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AvatarAsyncBuildResponse, error)

	// PostV1AvatarAsyncGenerateWithBodyWithResponse request with any body
	PostV1AvatarAsyncGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AvatarAsyncGenerateResponse, error)

	PostV1AvatarAsyncGenerateWithResponse(ctx context.Context, body PostV1AvatarAsyncGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AvatarAsyncGenerateResponse, error)

	// GetV1AvatarAsyncGenerateTaskIdStatusWithResponse request
	GetV1AvatarAsyncGenerateTaskIdStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetV1AvatarAsyncGenerateTaskIdStatusResponse, error)

	// GetV1AvatarListWithResponse request
	GetV1AvatarListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AvatarListResponse, error)

	// GetV1AvatarIdWithResponse request
	GetV1AvatarIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AvatarIdResponse, error)

	// PostV1ImageAsyncGenerateWithBodyWithResponse request with any body
	PostV1ImageAsyncGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ImageAsyncGenerateResponse, error)

	PostV1ImageAsyncGenerateWithResponse(ctx context.Context, body PostV1ImageAsyncGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ImageAsyncGenerateResponse, error)

	// GetV1ImageAsyncGenerateTaskIdStatusWithResponse request
	GetV1ImageAsyncGenerateTaskIdStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetV1ImageAsyncGenerateTaskIdStatusResponse, error)

	// GetV1InteractiveListWithResponse request
	GetV1InteractiveListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1InteractiveListResponse, error)

	// GetV1InteractiveSessionIdProfileWithResponse request
	GetV1InteractiveSessionIdProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1InteractiveSessionIdProfileResponse, error)

	// PostV1InteractiveStartSessionWithBodyWithResponse request with any body
	PostV1InteractiveStartSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InteractiveStartSessionResponse, error)

	PostV1InteractiveStartSessionWithResponse(ctx context.Context, body PostV1InteractiveStartSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InteractiveStartSessionResponse, error)

	// PostV1InteractiveStopSessionsWithBodyWithResponse request with any body
	PostV1InteractiveStopSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InteractiveStopSessionsResponse, error)

	PostV1InteractiveStopSessionsWithResponse(ctx context.Context, body PostV1InteractiveStopSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InteractiveStopSessionsResponse, error)

	// PostV1SpeechSttWithBodyWithResponse request with any body
	PostV1SpeechSttWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SpeechSttResponse, error)

	PostV1SpeechSttWithResponse(ctx context.Context, body PostV1SpeechSttJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SpeechSttResponse, error)

	// PostV1SpeechTtsWithBodyWithResponse request with any body
	PostV1SpeechTtsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SpeechTtsResponse, error)

	PostV1SpeechTtsWithResponse(ctx context.Context, body PostV1SpeechTtsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SpeechTtsResponse, error)

	// PostV1VideoAsyncGenerateTalkingAvatarWithBodyWithResponse request with any body
	PostV1VideoAsyncGenerateTalkingAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1VideoAsyncGenerateTalkingAvatarResponse, error)

	PostV1VideoAsyncGenerateTalkingAvatarWithResponse(ctx context.Context, body PostV1VideoAsyncGenerateTalkingAvatarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1VideoAsyncGenerateTalkingAvatarResponse, error)

	// GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusWithResponse request
	GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse, error)

	// PostV1VoiceCloneWithBodyWithResponse request with any body
	PostV1VoiceCloneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1VoiceCloneResponse, error)

	// GetV1VoiceCloneTaskIdStatusWithResponse request
	GetV1VoiceCloneTaskIdStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetV1VoiceCloneTaskIdStatusResponse, error)

	// GetV1VoicePremadeProfilesWithResponse request
	GetV1VoicePremadeProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1VoicePremadeProfilesResponse, error)
}

type PostV1AvatarAsyncBuildResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncBuildApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1AvatarAsyncBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AvatarAsyncBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AvatarAsyncGenerateResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncGenerateAvatarApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1AvatarAsyncGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AvatarAsyncGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AvatarAsyncGenerateTaskIdStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GenerateAvatarStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1AvatarAsyncGenerateTaskIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AvatarAsyncGenerateTaskIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AvatarListResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetUserAvatarListApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1AvatarListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AvatarListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AvatarIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetAvatarApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1AvatarIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AvatarIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ImageAsyncGenerateResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncGenerateImageApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1ImageAsyncGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ImageAsyncGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ImageAsyncGenerateTaskIdStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GenerateImageStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1ImageAsyncGenerateTaskIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ImageAsyncGenerateTaskIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InteractiveListResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ListSessionsApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1InteractiveListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InteractiveListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InteractiveSessionIdProfileResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetSessionProfileApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1InteractiveSessionIdProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InteractiveSessionIdProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1InteractiveStartSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *StartSessionApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1InteractiveStartSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1InteractiveStartSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1InteractiveStopSessionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *StopSessionsApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1InteractiveStopSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1InteractiveStopSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SpeechSttResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *STTApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1SpeechSttResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SpeechSttResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SpeechTtsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TTSApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1SpeechTtsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SpeechTtsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1VideoAsyncGenerateTalkingAvatarResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncGenerateTalkingAvatarApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1VideoAsyncGenerateTalkingAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1VideoAsyncGenerateTalkingAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GenerateTalkingAvatarStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1VoiceCloneResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncFinetuningApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PostV1VoiceCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1VoiceCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VoiceCloneTaskIdStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *FinetuningStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1VoiceCloneTaskIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VoiceCloneTaskIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VoicePremadeProfilesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetPremadeProfilesApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetV1VoicePremadeProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VoicePremadeProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostV1AvatarAsyncBuildWithBodyWithResponse request with arbitrary body returning *PostV1AvatarAsyncBuildResponse
func (c *ClientWithResponses) PostV1AvatarAsyncBuildWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AvatarAsyncBuildResponse, error) {
	rsp, err := c.PostV1AvatarAsyncBuildWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AvatarAsyncBuildResponse(rsp)
}

func (c *ClientWithResponses) PostV1AvatarAsyncBuildWithResponse(ctx context.Context, body PostV1AvatarAsyncBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AvatarAsyncBuildResponse, error) {
	rsp, err := c.PostV1AvatarAsyncBuild(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AvatarAsyncBuildResponse(rsp)
}

// PostV1AvatarAsyncGenerateWithBodyWithResponse request with arbitrary body returning *PostV1AvatarAsyncGenerateResponse
func (c *ClientWithResponses) PostV1AvatarAsyncGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AvatarAsyncGenerateResponse, error) {
	rsp, err := c.PostV1AvatarAsyncGenerateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AvatarAsyncGenerateResponse(rsp)
}

func (c *ClientWithResponses) PostV1AvatarAsyncGenerateWithResponse(ctx context.Context, body PostV1AvatarAsyncGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AvatarAsyncGenerateResponse, error) {
	rsp, err := c.PostV1AvatarAsyncGenerate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AvatarAsyncGenerateResponse(rsp)
}

// GetV1AvatarAsyncGenerateTaskIdStatusWithResponse request returning *GetV1AvatarAsyncGenerateTaskIdStatusResponse
func (c *ClientWithResponses) GetV1AvatarAsyncGenerateTaskIdStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetV1AvatarAsyncGenerateTaskIdStatusResponse, error) {
	rsp, err := c.GetV1AvatarAsyncGenerateTaskIdStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AvatarAsyncGenerateTaskIdStatusResponse(rsp)
}

// GetV1AvatarListWithResponse request returning *GetV1AvatarListResponse
func (c *ClientWithResponses) GetV1AvatarListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AvatarListResponse, error) {
	rsp, err := c.GetV1AvatarList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AvatarListResponse(rsp)
}

// GetV1AvatarIdWithResponse request returning *GetV1AvatarIdResponse
func (c *ClientWithResponses) GetV1AvatarIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AvatarIdResponse, error) {
	rsp, err := c.GetV1AvatarId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AvatarIdResponse(rsp)
}

// PostV1ImageAsyncGenerateWithBodyWithResponse request with arbitrary body returning *PostV1ImageAsyncGenerateResponse
func (c *ClientWithResponses) PostV1ImageAsyncGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ImageAsyncGenerateResponse, error) {
	rsp, err := c.PostV1ImageAsyncGenerateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ImageAsyncGenerateResponse(rsp)
}

func (c *ClientWithResponses) PostV1ImageAsyncGenerateWithResponse(ctx context.Context, body PostV1ImageAsyncGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ImageAsyncGenerateResponse, error) {
	rsp, err := c.PostV1ImageAsyncGenerate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ImageAsyncGenerateResponse(rsp)
}

// GetV1ImageAsyncGenerateTaskIdStatusWithResponse request returning *GetV1ImageAsyncGenerateTaskIdStatusResponse
func (c *ClientWithResponses) GetV1ImageAsyncGenerateTaskIdStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetV1ImageAsyncGenerateTaskIdStatusResponse, error) {
	rsp, err := c.GetV1ImageAsyncGenerateTaskIdStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ImageAsyncGenerateTaskIdStatusResponse(rsp)
}

// GetV1InteractiveListWithResponse request returning *GetV1InteractiveListResponse
func (c *ClientWithResponses) GetV1InteractiveListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1InteractiveListResponse, error) {
	rsp, err := c.GetV1InteractiveList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InteractiveListResponse(rsp)
}

// GetV1InteractiveSessionIdProfileWithResponse request returning *GetV1InteractiveSessionIdProfileResponse
func (c *ClientWithResponses) GetV1InteractiveSessionIdProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1InteractiveSessionIdProfileResponse, error) {
	rsp, err := c.GetV1InteractiveSessionIdProfile(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InteractiveSessionIdProfileResponse(rsp)
}

// PostV1InteractiveStartSessionWithBodyWithResponse request with arbitrary body returning *PostV1InteractiveStartSessionResponse
func (c *ClientWithResponses) PostV1InteractiveStartSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InteractiveStartSessionResponse, error) {
	rsp, err := c.PostV1InteractiveStartSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InteractiveStartSessionResponse(rsp)
}

func (c *ClientWithResponses) PostV1InteractiveStartSessionWithResponse(ctx context.Context, body PostV1InteractiveStartSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InteractiveStartSessionResponse, error) {
	rsp, err := c.PostV1InteractiveStartSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InteractiveStartSessionResponse(rsp)
}

// PostV1InteractiveStopSessionsWithBodyWithResponse request with arbitrary body returning *PostV1InteractiveStopSessionsResponse
func (c *ClientWithResponses) PostV1InteractiveStopSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InteractiveStopSessionsResponse, error) {
	rsp, err := c.PostV1InteractiveStopSessionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InteractiveStopSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostV1InteractiveStopSessionsWithResponse(ctx context.Context, body PostV1InteractiveStopSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InteractiveStopSessionsResponse, error) {
	rsp, err := c.PostV1InteractiveStopSessions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InteractiveStopSessionsResponse(rsp)
}

// PostV1SpeechSttWithBodyWithResponse request with arbitrary body returning *PostV1SpeechSttResponse
func (c *ClientWithResponses) PostV1SpeechSttWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SpeechSttResponse, error) {
	rsp, err := c.PostV1SpeechSttWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SpeechSttResponse(rsp)
}

func (c *ClientWithResponses) PostV1SpeechSttWithResponse(ctx context.Context, body PostV1SpeechSttJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SpeechSttResponse, error) {
	rsp, err := c.PostV1SpeechStt(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SpeechSttResponse(rsp)
}

// PostV1SpeechTtsWithBodyWithResponse request with arbitrary body returning *PostV1SpeechTtsResponse
func (c *ClientWithResponses) PostV1SpeechTtsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SpeechTtsResponse, error) {
	rsp, err := c.PostV1SpeechTtsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SpeechTtsResponse(rsp)
}

func (c *ClientWithResponses) PostV1SpeechTtsWithResponse(ctx context.Context, body PostV1SpeechTtsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SpeechTtsResponse, error) {
	rsp, err := c.PostV1SpeechTts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SpeechTtsResponse(rsp)
}

// PostV1VideoAsyncGenerateTalkingAvatarWithBodyWithResponse request with arbitrary body returning *PostV1VideoAsyncGenerateTalkingAvatarResponse
func (c *ClientWithResponses) PostV1VideoAsyncGenerateTalkingAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1VideoAsyncGenerateTalkingAvatarResponse, error) {
	rsp, err := c.PostV1VideoAsyncGenerateTalkingAvatarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VideoAsyncGenerateTalkingAvatarResponse(rsp)
}

func (c *ClientWithResponses) PostV1VideoAsyncGenerateTalkingAvatarWithResponse(ctx context.Context, body PostV1VideoAsyncGenerateTalkingAvatarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1VideoAsyncGenerateTalkingAvatarResponse, error) {
	rsp, err := c.PostV1VideoAsyncGenerateTalkingAvatar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VideoAsyncGenerateTalkingAvatarResponse(rsp)
}

// GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusWithResponse request returning *GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse
func (c *ClientWithResponses) GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse, error) {
	rsp, err := c.GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse(rsp)
}

// PostV1VoiceCloneWithBodyWithResponse request with arbitrary body returning *PostV1VoiceCloneResponse
func (c *ClientWithResponses) PostV1VoiceCloneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1VoiceCloneResponse, error) {
	rsp, err := c.PostV1VoiceCloneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VoiceCloneResponse(rsp)
}

// GetV1VoiceCloneTaskIdStatusWithResponse request returning *GetV1VoiceCloneTaskIdStatusResponse
func (c *ClientWithResponses) GetV1VoiceCloneTaskIdStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetV1VoiceCloneTaskIdStatusResponse, error) {
	rsp, err := c.GetV1VoiceCloneTaskIdStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VoiceCloneTaskIdStatusResponse(rsp)
}

// GetV1VoicePremadeProfilesWithResponse request returning *GetV1VoicePremadeProfilesResponse
func (c *ClientWithResponses) GetV1VoicePremadeProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1VoicePremadeProfilesResponse, error) {
	rsp, err := c.GetV1VoicePremadeProfiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VoicePremadeProfilesResponse(rsp)
}

// ParsePostV1AvatarAsyncBuildResponse parses an HTTP response from a PostV1AvatarAsyncBuildWithResponse call
func ParsePostV1AvatarAsyncBuildResponse(rsp *http.Response) (*PostV1AvatarAsyncBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AvatarAsyncBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncBuildApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1AvatarAsyncGenerateResponse parses an HTTP response from a PostV1AvatarAsyncGenerateWithResponse call
func ParsePostV1AvatarAsyncGenerateResponse(rsp *http.Response) (*PostV1AvatarAsyncGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AvatarAsyncGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncGenerateAvatarApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1AvatarAsyncGenerateTaskIdStatusResponse parses an HTTP response from a GetV1AvatarAsyncGenerateTaskIdStatusWithResponse call
func ParseGetV1AvatarAsyncGenerateTaskIdStatusResponse(rsp *http.Response) (*GetV1AvatarAsyncGenerateTaskIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AvatarAsyncGenerateTaskIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenerateAvatarStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1AvatarListResponse parses an HTTP response from a GetV1AvatarListWithResponse call
func ParseGetV1AvatarListResponse(rsp *http.Response) (*GetV1AvatarListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AvatarListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserAvatarListApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1AvatarIdResponse parses an HTTP response from a GetV1AvatarIdWithResponse call
func ParseGetV1AvatarIdResponse(rsp *http.Response) (*GetV1AvatarIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AvatarIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAvatarApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1ImageAsyncGenerateResponse parses an HTTP response from a PostV1ImageAsyncGenerateWithResponse call
func ParsePostV1ImageAsyncGenerateResponse(rsp *http.Response) (*PostV1ImageAsyncGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ImageAsyncGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncGenerateImageApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1ImageAsyncGenerateTaskIdStatusResponse parses an HTTP response from a GetV1ImageAsyncGenerateTaskIdStatusWithResponse call
func ParseGetV1ImageAsyncGenerateTaskIdStatusResponse(rsp *http.Response) (*GetV1ImageAsyncGenerateTaskIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ImageAsyncGenerateTaskIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenerateImageStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1InteractiveListResponse parses an HTTP response from a GetV1InteractiveListWithResponse call
func ParseGetV1InteractiveListResponse(rsp *http.Response) (*GetV1InteractiveListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InteractiveListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSessionsApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1InteractiveSessionIdProfileResponse parses an HTTP response from a GetV1InteractiveSessionIdProfileWithResponse call
func ParseGetV1InteractiveSessionIdProfileResponse(rsp *http.Response) (*GetV1InteractiveSessionIdProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InteractiveSessionIdProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSessionProfileApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1InteractiveStartSessionResponse parses an HTTP response from a PostV1InteractiveStartSessionWithResponse call
func ParsePostV1InteractiveStartSessionResponse(rsp *http.Response) (*PostV1InteractiveStartSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1InteractiveStartSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StartSessionApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1InteractiveStopSessionsResponse parses an HTTP response from a PostV1InteractiveStopSessionsWithResponse call
func ParsePostV1InteractiveStopSessionsResponse(rsp *http.Response) (*PostV1InteractiveStopSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1InteractiveStopSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopSessionsApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1SpeechSttResponse parses an HTTP response from a PostV1SpeechSttWithResponse call
func ParsePostV1SpeechSttResponse(rsp *http.Response) (*PostV1SpeechSttResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SpeechSttResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest STTApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1SpeechTtsResponse parses an HTTP response from a PostV1SpeechTtsWithResponse call
func ParsePostV1SpeechTtsResponse(rsp *http.Response) (*PostV1SpeechTtsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SpeechTtsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TTSApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1VideoAsyncGenerateTalkingAvatarResponse parses an HTTP response from a PostV1VideoAsyncGenerateTalkingAvatarWithResponse call
func ParsePostV1VideoAsyncGenerateTalkingAvatarResponse(rsp *http.Response) (*PostV1VideoAsyncGenerateTalkingAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1VideoAsyncGenerateTalkingAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncGenerateTalkingAvatarApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse parses an HTTP response from a GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusWithResponse call
func ParseGetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse(rsp *http.Response) (*GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VideoAsyncGenerateTalkingAvatarTaskIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenerateTalkingAvatarStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1VoiceCloneResponse parses an HTTP response from a PostV1VoiceCloneWithResponse call
func ParsePostV1VoiceCloneResponse(rsp *http.Response) (*PostV1VoiceCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1VoiceCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncFinetuningApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1VoiceCloneTaskIdStatusResponse parses an HTTP response from a GetV1VoiceCloneTaskIdStatusWithResponse call
func ParseGetV1VoiceCloneTaskIdStatusResponse(rsp *http.Response) (*GetV1VoiceCloneTaskIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VoiceCloneTaskIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FinetuningStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1VoicePremadeProfilesResponse parses an HTTP response from a GetV1VoicePremadeProfilesWithResponse call
func ParseGetV1VoicePremadeProfilesResponse(rsp *http.Response) (*GetV1VoicePremadeProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VoicePremadeProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPremadeProfilesApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}
